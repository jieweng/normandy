<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
	label="{resourceManager.getString('Language','label.basic_information')}"
	xmlns:vo="com.pearl.normandy.vo.*" 
	xmlns:utils="com.pearl.normandy.utils.*"
	xmlns:ext="com.adobe.flex.extras.controls.*"
	xmlns:widget="widget.*"	
	width="100%"  height="100%"
	paddingTop="20" paddingBottom="20" paddingLeft="30" paddingRight="30"
	creationComplete="init()">
	
	<mx:Script source="../script/CommonScript.as"/>
	<mx:Script>
		<![CDATA[
			import view.TaskView;
			import mx.rpc.events.ResultEvent;
			import mx.collections.ArrayCollection;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.pearl.normandy.enum.ImageEnum;
			import mx.validators.Validator;
			
			import com.pearl.normandy.component.progressWindow.ProgressBarWindow;
			import com.pearl.normandy.event.UploadEvent;			
			import com.pearl.normandy.vo.ListOfValue;	
			import com.pearl.normandy.vo.ProjectVO;			
			import com.pearl.normandy.vo.TaskVO;
			import com.pearl.normandy.utils.DateUtil;
			import com.pearl.normandy.utils.Constants;
			
			import com.pearl.normandy.event.TaskEvent;			
			
			
			//==============================
		    //Attributes
		    //==============================
		    
		    private var _selectedProject:ProjectVO;
		    
		    [Bindable]
		    public function set selectedProject(value:ProjectVO):void{
		    	this._selectedProject = value;
		    	taskRo.getMilestone(selectedProject.id, false);
				taskRo.getTaskCategory(selectedProject.id, false);
				setReferenceImgSource();
		    }
		    
		    public function get selectedProject():ProjectVO{
		    	return this._selectedProject;
		    }
		     		   		   					            			
            private var _selectedTask:TaskVO;
            
            [Bindable]
            public function set selectedTask(value:TaskVO):void{
            	this._selectedTask = value;
            	if(selectedProject && selectedTask){
            		CairngormEventDispatcher.getInstance().dispatchEvent(TaskEvent.getTaskTaskGroupEvent(selectedProject, selectedTask));
            	}            	
            	setReferenceImgSource(); 
            }
            
            public function get selectedTask():TaskVO{
            	return this._selectedTask;
            }
											
			[Bindable]
			private var projectMilestones:ArrayCollection;						
						
			[Bindable]
			private var _projectTaskCategories:ArrayCollection;			
			public function set projectTaskCategories(value:ArrayCollection):void{
				this._projectTaskCategories = value;				
				
				if(projectTaskCategories && projectTaskCategories.length > 0){					
									
					var category:String;									
					if(selectedTask == null){
						taskCategory.selectedIndex = 0;				 	
					}								
					else{
						category = selectedTask.taskCategory;
						
						var match:Boolean = false;				
		   				for(var i:int=0;i<projectTaskCategories.length;i++){
				   			var item:String = projectTaskCategories.getItemAt(i) as String;
			   				if(item == category){
			   					taskCategory.selectedIndex = i;
			   					match = true;
			   					break;
			   				}
		   				}

		   				if(!match){
		   					taskCategory.selectedIndex = 0;
		   				}
		   			}
				}					
			}
			
			public function get projectTaskCategories():ArrayCollection{
				return this._projectTaskCategories;
			}
						
		    //==============================
		    //Method
		    //============================== 	
		    private function init():void{
//		    	selectedProject = model.GLOBAL_SELECTED_PROJECT;
//		    	selectedTask = model.GLOBAL_SELECTED_TASK;
//		    	
//				taskRo.getMilestone(selectedProject.id, false);
//				taskRo.getTaskCategory(selectedProject.id, false);
//				CairngormEventDispatcher.getInstance().dispatchEvent(TaskEvent.getTaskTaskGroupEvent(selectedProject, selectedTask));	
//				
//				setReferenceImgSource(); 				  	
		    }
		    		
			public function validate():Array{
 				var validateResult:Array = Validator.validateAll([taskNameValidation]);
				return validateResult;
			}
			
			public function getTask():TaskVO{
				selectedTask.milestone = milestone.text;
				selectedTask.name = taskName.text;
				selectedTask.type = taskType.selectedItem.type;
				selectedTask.taskCategory = taskCategory.text;
				selectedTask.taskPriorityId = (priority.selectedItem as ListOfValue).id;
 				selectedTask.taskGroup = taskGroup.text;
				selectedTask.description = taskDescription.text;
				selectedTask.updatedBy = model.currUser.userName;
//				selectedTask.referenceUrl = task.referenceUrl;
				return selectedTask;
			}
	  		
	  		private function setReferenceImgSource():void{	  			
				if(selectedProject && selectedTask && selectedTask.referenceUrl != ""){
	  				var imageSource:String = model.metaData.referenceUrl + selectedProject.id + "/" + selectedTask.referenceUrl;
					browserCanvas.viewImage.load(imageSource);
	  			} 	
	  		}
	  		
			
			private function onClickReferenceImg():void{
				
			}
			
			
		    //==============================
		    //Event Handlers
		    //==============================			  						
	  		private function onUploadComplete(event:UploadEvent):void{
			 	selectedTask.referenceUrl = event.url;
				browserCanvas.url = model.metaData.referenceTempUrl + event.url; 
				
			}					
			
			private function getMilestoneHandler(event:ResultEvent):void{
				projectMilestones = event.result as ArrayCollection;
			}
			
			private function getTaskCategoryHandler(event:ResultEvent):void{
				projectTaskCategories = event.result as ArrayCollection; 	
			}			
		]]>
	</mx:Script>
	
	
	<utils:FileUpload id="fileUpload" prefix="{selectedProject.projectKey}" 
		creationComplete="fileUpload.init(ProgressBarWindow, browserCanvas)" complete="onUploadComplete(event)"/>	
	
	
    <!--==========================
	    Service
	  ===========================-->	
	<mx:RemoteObject id="taskRo" destination="ro.task" fault="faultHandler(event)">
		<mx:method name="getMilestone" result="getMilestoneHandler(event)"/>
		<mx:method name="getTaskCategory" result="getTaskCategoryHandler(event)"/>
	</mx:RemoteObject>			
	
	<!--==========================
	    Page Layout
	===========================-->
	<mx:VBox width="50%" height="100%">
	    <mx:Form width="100%" height="100%" borderColor="#FFFFFF">
	        <mx:FormItem label="{resourceManager.getString('Language','label.project_name')}" fontWeight="bold">
	            <!--mx:Label id="projectName" text="{selectedProject.projectName}" fontWeight="bold" width="100%"/-->
	            <mx:Label id="projectName" text="{selectedTask.projectName}" fontWeight="bold" width="100%"/>
	        </mx:FormItem> 
	        <mx:FormItem label="{resourceManager.getString('Language','label.task_id')}">
	            <mx:Label id="taskId" text="{selectedTask.id}" width="100%"/>
	        </mx:FormItem> 	        
	        <mx:FormItem required="true" label="{resourceManager.getString('Language','label.task_name')}">
	            <mx:TextInput id="taskName" text="{selectedTask.name}" width="300"/>
	        </mx:FormItem>     
	        <mx:FormItem required="true" label="{resourceManager.getString('Language','label.start_date')}">
	        	<mx:Label text="{DateUtil.format(selectedTask.startTime, DateUtil.SHORT)}"/>
	        </mx:FormItem> 
	        <mx:FormItem required="true" label="{resourceManager.getString('Language','label.end_date')}">
	        	<mx:Label text="{DateUtil.format(selectedTask.endTime, DateUtil.SHORT)}"/>
	        </mx:FormItem>
	        <mx:FormItem required="true" label="{resourceManager.getString('Language','label.planned_staff_days')}">
	        	<mx:Label text="{selectedTask.plannedStaffDays}"/>
	        </mx:FormItem>	        	        
	        <mx:FormItem label="{resourceManager.getString('Language','label.planned_feedback_days')} :">
	            <mx:Label id="plannedFeedbackDays" width="100%" text="{selectedTask.plannedFeedbackDays}"/>
	        </mx:FormItem>          	        
	        <mx:FormItem required="true" label="{resourceManager.getString('Language','label.task_type')}">
	            <mx:ComboBox id="taskType" width="200" labelField="type" dataProvider="{model.TYPE}"
	            	selectedIndex="{selectedTask.type==Constants.PROJECT_TYPE_TRAINING?1:0}"/>
	        </mx:FormItem>
	        <mx:FormItem required="true" label="{resourceManager.getString('Language','label.priority')}">
	            <mx:ComboBox id="priority" selectedIndex="{selectedTask.taskPriorityId-(model.metaData.priorities.getItemAt(0) as ListOfValue).id}" dataProvider="{model.metaData.priorities}" 
	            	width="200" labelField="listValue"/>
	        </mx:FormItem>	        			           
	        <mx:FormItem label="{resourceManager.getString('Language','label.task_category')}">
	            <mx:ComboBox id="taskCategory" dataProvider="{_projectTaskCategories}" width="200" editable="true"
	            	labelField="listValue"
	            	text="{selectedTask.taskCategory}"/>
	        </mx:FormItem>
	        <mx:FormItem label="{resourceManager.getString('Language','label.milestone')}">
	            <mx:TextInput id="milestone" text="{selectedTask.milestone}" width="300"/>
	        </mx:FormItem>
	        <mx:FormItem label="{resourceManager.getString('Language','label.task_group')}">
	            <ext:AutoComplete id="taskGroup" dataProvider="{model.LOCAL_TASK_TASK_GROUPS}" width="300"/>
	        </mx:FormItem>	        	        


	        <mx:FormItem label="{resourceManager.getString('Language','label.task_description')}">
	            <mx:TextArea id="taskDescription" text="{selectedTask.description}" width="300" height="150"/>
	        </mx:FormItem>	                                      
	    </mx:Form>
	</mx:VBox>
    <mx:VBox width="50%" height="100%">	  
    	<mx:ApplicationControlBar width="100%" height="30" horizontalAlign="center" dock="true"/> 		    
		<widget:BrowserCanvas id="browserCanvas" width="100%" height="350" horizontalScrollPolicy="auto" verticalScrollPolicy="auto" 
			borderStyle="none" shadowDistance="0" shadowDirection="center" left="0" right="0" top="0" bottom="0"/>
			
		<mx:ApplicationControlBar width="100%"  horizontalAlign="center" dock="true" height="30" styleName="ApplicationControlBarReverse">
			<mx:HBox width="100%" horizontalAlign="center">	 
    			<mx:Button id="startUpload" label="{resourceManager.getString('Language','button.file.upload')}" 
					click="fileUpload.browse()"/>
				<mx:Button label="{resourceManager.getString('Language','button.file.delete')}" enabled="false"/>  
				<mx:Button  mouseDown="browserCanvas.onFit(event)" toolTip="{resourceManager.getString('Language','label.fit.size')}" 
					icon="{ImageEnum.IMAGECLASS_ZOOM_FIT}"/>
				<mx:Button  mouseDown="browserCanvas.onFact(event)" toolTip="{resourceManager.getString('Language','label.actual.size')}" 
					icon="{ImageEnum.IMAGECLASS_ZOOM_ACTUAL}"/>
				<mx:VRule height="20"/>
				<mx:Button  mouseDown="browserCanvas.onZoomOut(event)" toolTip="{resourceManager.getString('Language','label.zoom_in')}" 
					icon="{ImageEnum.IMAGECLASS_ZOOM_IN}"/>
				<mx:Button  mouseDown="browserCanvas.onZoomIn(event)" toolTip="{resourceManager.getString('Language','label.zoom_out')}" 
					icon="{ImageEnum.IMAGECLASS_ZOOM_OUT}"/>   
			</mx:HBox>
		</mx:ApplicationControlBar>	
	</mx:VBox>	   	
	<mx:StringValidator id="taskNameValidation"
		source="{taskName}" property="text"/>
</mx:HBox>
